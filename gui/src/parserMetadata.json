{
  "ABACUS": {
    "codeCategory": "Atomistic code",
    "codeLabel": "ABACUS",
    "codeLabelStyle": "All in capitals",
    "codeName": "abacus",
    "codeUrl": "http://abacus.ustc.edu.cn/",
    "parserDirName": "dependencies/parsers/abacus/",
    "parserGitUrl": "https://github.com/nomad-coe/nomad-parser-abacus.git",
    "parserSpecific": "",
    "preamble": "",
    "status": "production",
    "tableOfFiles": "|Input Filename| Description|\n|--- | --- |\n|`<text_file>` | **Mainfile**, plain text file w/arbitrary name, e.g.,  `running_<scf, nscf, relax, ...md>.log` |\n|`INPUT` | Runtime information |\n|AUX FILES| Description|\n|`STRU` | Material's atomic-structure information |\n|`KPT` | K-points information |\n|`<text_file>` |  pseudopotental files |\n|`<text_file>`| optimized atomic basis sets |\n|`TDOS`| Kohn-Sham total DOS |\n|`PDOS`  | Projected DOS |\n|`BANDS_<nspin>.dat` | bandstructure file |\n"
  },
  "ABINIT": {
    "codeCategory": "Atomistic code",
    "codeLabel": "ABINIT",
    "codeLabelStyle": "all in capitals",
    "codeName": "abinit",
    "codeUrl": "https://www.abinit.org/",
    "parserDirName": "dependencies/electronic/electronicparsers/abinit/",
    "parserGitUrl": "https://github.com/nomad-coe/electronic-parsers.git",
    "parserSpecific": "",
    "preamble": "",
    "status": "production",
    "tableOfFiles": "|Input Filename| Description|\n|--- | --- |\n|`*.*o*` | **Mainfile:** a plain text file w/ **user-defined** name|\n|`*.files`| plain text; user-defined filenames |\n|`*.*i*`| plain text, input parameters|\n|`*_o_DDB`| netcdf binary file, Derivative DataBases of total energy|\n|`*_o_DEN`| netcdf binary file, charge density|\n|`*_o_EIG`| text file, eigenvalues|\n|`*_o_WFK`| netcdf binary file, wavefunction|\n|`*o_SCR`| netcdf binary file, RPA inverse dielectric screening |\n|`*o_SIGRES`| netcdf binary file, GW self-energy correction |\n|`log` | plain text, redirection of screen output (`stdout`)|\n"
  },
  "AFLOW": {
    "codeCategory": "Workflow manager",
    "codeLabel": "AFLOW",
    "codeLabelStyle": "all capitals",
    "codeName": "aflow",
    "codeUrl": "http://www.aflowlib.org/",
    "parserDirName": "dependencies/workflow/workflowparsers/aflow/",
    "parserGitUrl": "https://github.com/nomad-coe/workflow-parsers.git",
    "parserSpecific": "",
    "preamble": "",
    "status": "production",
    "tableOfFiles": "|Input Filename| Description|\n|--- | --- |\n|`aflowlib.json` | **Mainfile:** a json file containing the aflow output|\n|`aflow.ael.out`| plain text, elastic outputs|\n|`aflow.agl.out` | plain text, Debye model output|\n"
  },
  "AMS": {
    "codeCategory": "Atomistic code",
    "codeLabel": "AMS",
    "codeLabelStyle": "all in capitals",
    "codeName": "ams",
    "codeUrl": "https://www.scm.com",
    "parserDirName": "dependencies/electronic/electronicparsers/ams/",
    "parserGitUrl": "https://github.com/nomad-coe/electronic-parsers.git",
    "parserSpecific": "",
    "preamble": "",
    "status": "production",
    "tableOfFiles": ""
  },
  "ASAP": {
    "codeCategory": "Atomistic code",
    "codeLabel": "ASAP",
    "codeLabelStyle": "all in capitals",
    "codeName": "asap",
    "codeUrl": "https://wiki.fysik.dtu.dk/asap",
    "parserDirName": "dependencies/parsers/atomistic/atomisticparsers/asap/",
    "parserGitUrl": "https://github.com/nomad-coe/atomistic-parsers.git",
    "parserSpecific": "",
    "preamble": "",
    "status": "production",
    "tableOfFiles": ""
  },
  "ASR": {
    "codeCategory": "Workflow manager",
    "codeLabel": "ASR",
    "codeLabelStyle": "all in capitals",
    "codeName": "asr",
    "codeUrl": "https://asr.readthedocs.io/en/latest/index.html",
    "parserDirName": "dependencies/workflow/workflowparsers/asr/",
    "parserGitUrl": "https://github.com/nomad-coe/workflow-parsers.git",
    "parserSpecific": "",
    "preamble": "",
    "status": "production",
    "tableOfFiles": "|Input Filename| Description|\n|--- | --- |\n|`archive*.json` | **Mainfile:** a json file w/ **user-defined** name|\n"
  },
  "Amber": {
    "codeCategory": "Atomistic code",
    "codeLabel": "Amber",
    "codeLabelStyle": "only first character in capitals",
    "codeName": "amber",
    "codeUrl": "http://ambermd.org/",
    "parserDirName": "dependencies/parsers/atomistic/atomisticparsers/amber/",
    "parserGitUrl": "https://github.com/nomad-coe/atomistic-parsers.git",
    "parserSpecific": "The Amber parser supports the SANDER and PMEMD Molecular Dynamics codes.\n",
    "status": "production",
    "tableOfFiles": ""
  },
  "Atomate": {
    "codeCategory": "Workflow manager",
    "codeLabel": "Atomate",
    "codeLabelStyle": "Capitals: A",
    "codeName": "atomate",
    "codeUrl": "https://www.atomate.org/",
    "parserDirName": "dependencies/workflow/workflowparsers/mp/",
    "parserGitUrl": "https://github.com/nomad-coe/workflow-parsers.git",
    "parserSpecific": "",
    "preamble": "",
    "status": "production",
    "tableOfFiles": "|Input Filename| Description|\n|--- | --- |\n|`*materials.json` | **Mainfile:** a json file containing system info|\n|`*.json` | json files containing workflow results|\n"
  },
  "BOPfox": {
    "codeCategory": "Atomistic code",
    "codeLabel": "BOPfox",
    "codeLabelStyle": "Capitals: B,O,P",
    "codeName": "bopfox",
    "codeUrl": "http://bopfox.de/",
    "parserDirName": "dependencies/parsers/atomistic/atomisticparsers/bopfox/",
    "parserGitUrl": "https://github.com/nomad-coe/atomistic-parsers.git",
    "parserSpecific": "",
    "preamble": "",
    "status": "production",
    "tableOfFiles": ""
  },
  "BigDFT": {
    "codeCategory": "Atomistic code",
    "codeLabel": "BigDFT",
    "codeLabelStyle": "Capitals: B,D,F,T,",
    "codeName": "bigdft",
    "codeUrl": "http://bigdft.org/",
    "parserDirName": "dependencies/electronic/electronicparsers/bigdft/",
    "parserGitUrl": "https://github.com/nomad-coe/electronic-parsers.git",
    "parserSpecific": "",
    "preamble": "",
    "status": "production",
    "tableOfFiles": ""
  },
  "CASTEP": {
    "codeCategory": "Atomistic code",
    "codeLabel": "CASTEP",
    "codeLabelStyle": "all in capitals",
    "codeName": "castep",
    "codeUrl": "http://www.castep.org/",
    "parserDirName": "dependencies/electronic/electronicparsers/castep/",
    "parserGitUrl": "https://github.com/nomad-coe/electronic-parsers.git",
    "parserSpecific": "### CASTEP output examples\n[Note: The list below is much shorter than the existing examples]\nA few output files to test the parser are provided in the directory `castep/test/examples/*/`.\n\n        FILE NAME     |              FILE DESCRIPTION\n    __________________|___________________________________________________\n    \"Si2.castep_v_1\" --> Single Point Calculation (minimum verbosity)\n    \"Si2.castep_v_2\" --> Single Point Calculation (medium verbosity)\n    \"Si2.castep_v_3\" --> Single Point Calculation (maximum verbosity)\n\n    \"Si2.castep_b_v_1\" --> Band Structure Calculation (minimum verbosity)\n    \"Si2.castep_b_v_2\" --> Band Structure Calculation (medium verbosity)\n    \"Si2.castep_b_v_3\" --> Band Structure Calculation (maximum verbosity)\n",
    "preamble": "",
    "status": "production",
    "tableOfFiles": ""
  },
  "CHARMM": {
    "codeCategory": "Atomistic code",
    "codeLabel": "CHARMM",
    "codeLabelStyle": "all in capitals",
    "codeName": "charmm",
    "codeUrl": "https://www.charmm.org",
    "parserDirName": "dependencies/electronic/electronicparsers/charmm/",
    "parserGitUrl": "https://github.com/nomad-coe/electronic-parsers.git",
    "preamble": "",
    "status": "production",
    "tableOfFiles": ""
  },
  "CP2K": {
    "codeCategory": "Atomistic code",
    "codeLabel": "CP2K",
    "codeLabelStyle": "all in capitals",
    "codeName": "cp2k",
    "codeUrl": "https://www.cp2k.org/",
    "parserDirName": "dependencies/electronic/electronicparsers/cp2k/",
    "parserGitUrl": "https://github.com/nomad-coe/electronic-parsers.git",
    "parserSpecific": "## Usage notes\nThe parser is based on CP2K 2.6.2.\n\nThe CP2K input setting\n[PRINT_LEVEL](https://manual.cp2k.org/trunk/CP2K_INPUT/GLOBAL.html#PRINT_LEVEL)\ncontrols the amount of details that are outputted during the calculation. The\nhigher this setting is, the more can be parsed from the upload.\n\nThe parser will try to find the paths to all the input and output files, but if\nthey are located very deep inside some folder structure or outside the folder\nwhere the output file is, the parser will not be able to locate them. For this\nreason it is recommended to keep the upload structure as flat as possible.\n\nHere is a list of features/fixes that would make the parsing of CP2K results\neasier:\n- The pdb trajectory output doesn't seem to conform to the actual standard as\n  the different configurations are separated by the END keyword which is\n  supposed to be written only once in the file. The [format\n  specification](http://www.wwpdb.org/documentation/file-format) states that\n  different configurations should start with MODEL and end with ENDMDL tags.\n- The output file should contain the paths/filenames of different input and\n  output files that are accessed during the program run. This data is already\n  available for some files (input file, most files produced by MD), but many\n  are not mentioned.\n",
    "preamble": "",
    "status": "production",
    "tableOfFiles": ""
  },
  "CPMD": {
    "codeCategory": "Atomistic code",
    "codeLabel": "CPMD",
    "codeLabelStyle": "all in capitals",
    "codeName": "cpmd",
    "codeUrl": "https://www.cpmd.org/",
    "parserDirName": "dependencies/electronic/electronicparsers/cpmd/",
    "parserGitUrl": "https://github.com/nomad-coe/electronic-parsers.git",
    "parserSpecific": "",
    "preamble": "",
    "status": "production",
    "tableOfFiles": ""
  },
  "CRYSTAL": {
    "codeCategory": "Atomistic code",
    "codeLabel": "CRYSTAL",
    "codeLabelStyle": "all in capitals",
    "codeName": "crystal",
    "codeUrl": "https://www.crystal.unito.it/",
    "parserDirName": "dependencies/electronic/electronicparsers/crystal/",
    "parserGitUrl": "https://github.com/nomad-coe/electronic-parsers.git",
    "parserSpecific": "",
    "preamble": "",
    "status": "production",
    "tableOfFiles": "|Input Filename| Description|\n|--- | --- |\n|`<text_file>` | **Mainfile**, plain text file w/arbitrary name. E.g.,  `simulation.out` |\n|`<text_file>.d12` | Program input. Plain text file with the same name (different extension) as the mainfile. E.g. `simulation.d12` |\n|AUX FILES| Description|\n|`<text_file>.f25`| Output of various electronic and electrical properties. Plain text file with the same name (different extension) as the mainfile. **NOTE**: required in order to parse band structures and density of states. E.g. `simulation.f25` |\n"
  },
  "DFTB+": {
    "codeCategory": "Atomistic code",
    "codeLabel": "DFTB+",
    "codeLabelStyle": "all in capitals; use + instead of word",
    "codeName": "dftbplus",
    "codeUrl": "http://www.dftbplus.org/",
    "parserDirName": "dependencies/parsers/atomistic/atomisticparsers/dftbplus/",
    "parserGitUrl": "https://github.com/nomad-coe/atomistic-parsers.git",
    "parserSpecific": "",
    "preamble": "",
    "status": "production",
    "tableOfFiles": ""
  },
  "DL_POLY": {
    "codeCategory": "Atomistic code",
    "codeLabel": "DL_POLY",
    "codeLabelStyle": "all capitals and underscore, not dash (minus)",
    "codeName": "dl-poly",
    "codeUrl": "https://www.scd.stfc.ac.uk/Pages/DL_POLY.aspx",
    "parserDirName": "dependencies/parsers/atomistic/atomisticparsers/dl-poly/",
    "parserGitUrl": "https://github.com/nomad-coe/atomistic-parsers.git",
    "parserSpecific": "",
    "preamble": "",
    "status": "production",
    "tableOfFiles": ""
  },
  "DMol3": {
    "codeCategory": "Atomistic code",
    "codeLabel": "DMol3",
    "codeLabelStyle": "Capitals: D, M",
    "codeName": "dmol",
    "codeUrl": "http://dmol3.web.psi.ch/",
    "parserDirName": "dependencies/electronic/electronicparsers/dmol3/",
    "parserGitUrl": "https://github.com/nomad-coe/electronic-parsers.git",
    "parserSpecific": "",
    "preamble": "",
    "status": "production",
    "tableOfFiles": ""
  },
  "EELSDB": {
    "codeCategory": "Database manager",
    "codeLabel": "EELSDB",
    "codeLabelStyle": "All in capitals",
    "codeName": "eels",
    "codeUrl": "https://eelsdb.eu/",
    "parserDirName": "dependencies/parsers/eelsdb/",
    "parserGitUrl": "https://github.com/nomad-coe/nomad-parser-eelsdb.git",
    "parserSpecific": "",
    "preamble": "",
    "status": "production",
    "tableOfFiles": ""
  },
  "ElaStic": {
    "codeCategory": "Workflow manager",
    "codeLabel": "ElaStic",
    "codeLabelStyle": "capitals: E, S. This is part of the exciting project",
    "codeName": "elastic",
    "codeUrl": "http://exciting.wikidot.com/elastic",
    "parserDirName": "dependencies/workflow/workflowparsers/elastic/",
    "parserGitUrl": "https://github.com/nomad-coe/workflow-parsers.git",
    "parserSpecific": "",
    "preamble": "",
    "status": "production",
    "tableOfFiles": ""
  },
  "Elk": {
    "codeCategory": "Atomistic code",
    "codeLabel": "Elk",
    "codeLabelStyle": "Only E in capitals",
    "codeName": "elk",
    "codeUrl": "http://elk.sourceforge.net/",
    "parserDirName": "dependencies/electronic/electronicparsers/elk/",
    "parserGitUrl": "https://github.com/nomad-coe/electronic-parsers.git",
    "parserSpecific": "",
    "preamble": "",
    "status": "production",
    "tableOfFiles": ""
  },
  "FHI-aims": {
    "codeCategory": "Atomistic code",
    "codeLabel": "FHI-aims",
    "codeLabelStyle": "Capitals: FHI, the rest in lowercase; use dash.",
    "codeName": "fhi-aims",
    "codeUrl": "https://aimsclub.fhi-berlin.mpg.de/",
    "parserDirName": "dependencies/electronic/electronicparsers/fhi-aims/",
    "parserGitUrl": "https://github.com/nomad-coe/electronic-parsers.git",
    "parserLastUpdate": "18.10.2022",
    "parserSpecific": "",
    "preamble": "",
    "status": "production",
    "tableOfFiles": "|Input Filename| Description|\n|--- | --- |\n|`<text_file>` | **Mainfile**, plain text file w/arbitrary name, e.g.,  `<output,control, aims,...>.out` |\n|`control.in` | Runtime information |\n|`geometry.in` | Material's atomic-structure information,  |\n|AUX FILES| Description|\n|`<atoml_label>_l_proj_dos.out`|  Angular-momentum-resolved DOS @ Fermi Energy|\n|`<atoml_label>_l_proj_dos_raw.out`|  Angular-momentum-resolved DOS @ vacuum|\n|`KS_DOS_total.dat`| Kohn-Sham total DOS @ Fermi Energy |\n|`KS_DOS_total_raw.dat`| Kohn-Sham total DOS @ vacuum |\n|`Mulliken.out` **WARNING-->**|Mulliken charge analysis on all atoms. **WARNING** not yet read by NOMAD's parser|\n|`atom_proj_dos_<atom_name><index>_raw.dat`  | Atom-projected DOS @ vacuum|\n|`atom_projected_dos_<atom_name><index>.dat`  | Atom-projected DOS @ Fermi Energy|\n|`band<spin><segment>.out` | bandstructure file |\n|`GW_band<spin><segment>` | GW bandstructure file |\n"
  },
  "FHI-vibes": {
    "codeCategory": "Workflow manager",
    "codeLabel": "FHI-vibes",
    "codeLabelStyle": "Capitals: FHI, the rest in lowercase; use dash.",
    "codeName": "fhi-vibes",
    "codeUrl": "https://vibes.fhi-berlin.mpg.de/",
    "parserDirName": "dependencies/workflow/workflowparsers/fhi-vibes/",
    "parserGitUrl": "https://github.com/nomad-coe/workflow-parsers.git",
    "parserSpecific": "",
    "preamble": "",
    "status": "production",
    "tableOfFiles": "|Input Filename| Description|\n|--- | --- |\n|`<hdf_file>` | **Mainfile**, binary hdf file w/ ext .nc` |\n"
  },
  "FLEUR": {
    "codeCategory": "Atomistic code",
    "codeLabel": "FLEUR",
    "codeLabelStyle": "Found: 1) only F in capitals, 2) all in capitals.",
    "codeName": "fleur",
    "codeUrl": "https://www.flapw.de/",
    "parserDirName": "dependencies/electronic/electronicparsers/fleur/",
    "parserGitUrl": "https://github.com/nomad-coe/electronic-parsers.git",
    "parserSpecific": "",
    "preamble": "",
    "status": "production",
    "tableOfFiles": ""
  },
  "FPLO": {
    "codeCategory": "Atomistic code",
    "codeLabel": "FPLO",
    "codeLabelStyle": "All in capitals",
    "codeName": "fplo",
    "codeUrl": "https://www.fplo.de/",
    "parserDirName": "dependencies/electronic/electronicparsers/fplo/",
    "parserGitUrl": "https://github.com/nomad-coe/electronic-parsers.git",
    "parserSpecific": "",
    "preamble": "",
    "status": "production",
    "tableOfFiles": ""
  },
  "GAMESS": {
    "codeCategory": "Atomistic code",
    "codeLabel": "GAMESS",
    "codeLabelStyle": "All in capitals",
    "codeName": "gamess",
    "codeUrl": "https://www.msg.chem.iastate.edu/",
    "parserDirName": "dependencies/electronic/electronicparsers/gamess/",
    "parserGitUrl": "https://github.com/nomad-coe/electronic-parsers.git",
    "parserSpecific": "",
    "preamble": "",
    "status": "production",
    "tableOfFiles": ""
  },
  "GPAW": {
    "codeCategory": "Atomistic code",
    "codeLabel": "GPAW",
    "codeLabelStyle": "All in capitals",
    "codeName": "gpaw",
    "codeUrl": "https://wiki.fysik.dtu.dk/gpaw/",
    "parserDirName": "dependencies/electronic/electronicparsers/gpaw/",
    "parserGitUrl": "https://github.com/nomad-coe/electronic-parsers.git",
    "parserSpecific": "",
    "preamble": "",
    "status": "production",
    "tableOfFiles": ""
  },
  "GROMACS": {
    "codeCategory": "Atomistic code",
    "codeLabel": "GROMACS",
    "codeLabelStyle": "All in capitals",
    "codeName": "gromacs",
    "codeUrl": "http://www.gromacs.org/",
    "parserDirName": "dependencies/parsers/atomistic/atomisticparsers/gromacs/",
    "parserGitUrl": "https://github.com/nomad-coe/atomistic-parsers.git",
    "parserSpecific": "",
    "preamble": "",
    "status": "production",
    "tableOfFiles": ""
  },
  "GROMOS": {
    "codeCategory": "Atomistic code",
    "codeLabel": "GROMOS",
    "codeLabelStyle": "All in capitals",
    "codeName": "gromos",
    "codeUrl": "http://www.gromos.net/",
    "parserDirName": "dependencies/parsers/atomistic/atomisticparsers/gromos/",
    "parserGitUrl": "https://github.com/nomad-coe/atomistic-parsers.git",
    "parserSpecific": "",
    "preamble": "",
    "status": "production",
    "tableOfFiles": ""
  },
  "GULP": {
    "codeCategory": "Atomistic code",
    "codeLabel": "GULP",
    "codeLabelStyle": "All in capitals",
    "codeName": "gulp",
    "codeUrl": "http://gulp.curtin.edu.au/gulp/",
    "parserDirName": "dependencies/parsers/atomistic/atomisticparsers/gulp/",
    "parserGitUrl": "https://github.com/nomad-coe/atomistic-parsers.git",
    "parserSpecific": "",
    "preamble": "",
    "status": "production",
    "tableOfFiles": ""
  },
  "Gaussian": {
    "codeCategory": "Atomistic code",
    "codeLabel": "Gaussian",
    "codeLabelStyle": "Capitals: G",
    "codeName": "gaussian",
    "codeUrl": "http://gaussian.com",
    "parserDirName": "dependencies/electronic/electronicparsers/gaussian/",
    "parserGitUrl": "https://github.com/nomad-coe/electronic-parsers.git",
    "parserSpecific": "",
    "status": "production",
    "tableOfFiles": ""
  },
  "LAMMPS": {
    "codeCategory": "Atomistic code",
    "codeLabel": "LAMMPS",
    "codeLabelStyle": "All in capitals",
    "codeName": "lammps",
    "codeUrl": "https://lammps.sandia.gov/",
    "parserDirName": "dependencies/parsers/atomistic/atomisticparsers/lammps/",
    "parserGitUrl": "https://github.com/nomad-coe/atomistic-parsers.git",
    "preamble": "",
    "status": "production",
    "tableOfFiles": ""
  },
  "LOBSTER": {
    "codeCategory": "Workflow manager",
    "codeLabel": "LOBSTER",
    "codeLabelStyle": "All in capitals",
    "codeName": "lobster",
    "codeUrl": "http://schmeling.ac.rwth-aachen.de/cohp/",
    "parserDirName": "dependencies/workflow/workflowparsers/lobster/",
    "parserGitUrl": "https://github.com/nomad-coe/workflow-parsers.git",
    "preamble": "",
    "status": "production",
    "tableOfFiles": "|Input Filename| Description|\n|--- | --- |\n|`lobsterout` | **Mainfile** in LOBSTER specific plain-text |\n"
  },
  "MOFStructures": {
    "codeCategory": "Workflow manager",
    "codeLabel": "MOFStructures",
    "codeLabelStyle": "Capitals: M, O, F, S",
    "codeName": "mofstructures",
    "codeUrl": null,
    "parserDirName": "dependencies/workflow/workflowparsers/mofstructures",
    "parserGitUrl": "https://github.com/nomad-coe/workflow-parsers.git",
    "parserSpecific": "",
    "preamble": "",
    "status": "beta",
    "tableOfFiles": "|Input Filename| Description|\n|--- | --- |\n|`*.json` | json files containing workflow results|\n"
  },
  "MOPAC": {
    "codeCategory": "Atomistic code",
    "codeLabel": "MOPAC",
    "codeLabelStyle": "All in capitals",
    "codeName": "mopac",
    "codeUrl": "http://openmopac.net/",
    "parserDirName": "dependencies/parsers/atomistic/atomisticparsers/mopac/",
    "parserGitUrl": "https://github.com/nomad-coe/atomistic-parsers.git",
    "parserSpecific": "",
    "preamble": "",
    "status": "production",
    "tableOfFiles": ""
  },
  "Molcas": {
    "codeCategory": "Atomistic code",
    "codeLabel": "Molcas",
    "codeLabelStyle": "Capitals: M; also seen all in capitals",
    "codeName": "molcas",
    "codeUrl": "http://molcas.org/",
    "parserDirName": "dependencies/electronic/electronicparsers/molcas/",
    "parserGitUrl": "https://github.com/nomad-coe/electronic-parsers.git",
    "parserSpecific": "",
    "preamble": "",
    "status": "production",
    "tableOfFiles": ""
  },
  "NAMD": {
    "codeCategory": "Atomistic code",
    "codeLabel": "NAMD",
    "codeLabelStyle": "All in capitals",
    "codeName": "namd",
    "codeUrl": "http://www.ks.uiuc.edu/Research/namd/",
    "parserDirName": "dependencies/parsers/atomistic/atomisticparsers/namd/",
    "parserGitUrl": "https://github.com/nomad-coe/atomistic-parsers.git",
    "parserSpecific": "",
    "preamble": "",
    "status": "production",
    "tableOfFiles": ""
  },
  "NWChem": {
    "codeCategory": "Atomistic code",
    "codeLabel": "NWChem",
    "codeLabelStyle": "Capitals: N, W, C",
    "codeName": "nwchem",
    "codeUrl": "https://nwchemgit.github.io/",
    "parserDirName": "dependencies/electronic/electronicparsers/nwchem/",
    "parserGitUrl": "https://github.com/nomad-coe/electronic-parsers.git",
    "parserSpecific": "",
    "preamble": "",
    "status": "production",
    "tableOfFiles": ""
  },
  "NeXus": {
    "codeCategory": "Database manager",
    "codeLabel": "NeXus",
    "codeLabelStyle": "capitals: N, X.",
    "codeName": "nexus",
    "codeUrl": "https://www.nexusformat.org/",
    "parserDirName": "dependencies/parsers/nexus/",
    "parserGitUrl": "https://github.com/nomad-coe/nomad-parser-nexus.git",
    "preamble": "This is not a real parser, but an example template on how to write one. You can fork this repository to create actual parsers.\n\n## Get started\n\nYou should create a virtual environment. This is optional, but highly recommended as\nthe required nomad-lab pypi package requires many dependencies with specific versions\nthat might conflict with other libraries that you have installed. This was tested\nwith Python 3.9.\n\n```\npip install virtualenv\nvirtualenv -p `which python3` .pyenv\nsource .pyenv/bin/activate\n```\n\nSimply install our pypi package with pip:\n```\npip install --upgrade pip\npip install nomad-lab\n```\n\nClone this project (or fork and then clone the fork). Go into the cloned directly and\ndirectly run the parser from there:\n```\ngit clone https://github.com/nomad-coe/nomad-parser-nexus.git parser-nexus\ncd parser-nexus\npython -m nexusutils tests/data/nexus.out\n```\n\nThere are also a basic test framework written in [pytest](https://docs.pytest.org/en/stable/).\nInstall the remaining dev dependencies and run the tests with:\n```\npip install -r requirements.txt\npytest -sv tests\n```\n\n## Next steps\n\nOur documentation provides several resources that might be interesting:\n- [How to write a parser](https://nomad-lab.eu/prod/rae/docs/parser.html). Provides\n  a more detailed tutorial on how to write a parser.\n- [Introduction to the NOMAD Metainfo](https://nomad-lab.eu/prod/rae/docs/metainfo.html).\n  This explains how NOMAD data schema and can be extended and used within your parser.\n\nTo get you parser included in NOMAD or ask further questions, you can:\n- Use our forums at [matsci.org](https://matsci.org/c/nomad/32)\n- Open an issue on the [nexus-parser GitHub project](https://github.com/nomad-coe/nomad-parser-nexus/issues)\n- Write to [support@nomad-lab.eu](mailto:support@nomad-lab.eu)\n\n**Note!** The rest of this README.md is the usual text that applies to all NOMAD parsers.\n",
    "status": "production",
    "tableOfFiles": "|Input Filename| Description|\n|--- | --- |\n|`nexus.out` | **Mainfile** in NEXUS specific plain-text |\n"
  },
  "OCEAN": {
    "codeCategory": "Atomistic code",
    "codeLabel": "OCEAN",
    "codeLabelStyle": "All in capitals",
    "codeName": "ocean",
    "codeUrl": "https://feff.phys.washington.edu/OCEAN/index.html",
    "parserDirName": "dependencies/electronic/electronicparsers/ocean/",
    "parserGitUrl": "https://github.com/nomad-coe/electronic-parsers.git",
    "parserSpecific": "",
    "preamble": "",
    "status": "production",
    "tableOfFiles": "| Input Filename | Description |\n| --- | --- |\n| `*` | **Mainfile:** text output file (in JSON format) |\n| `*.in` | input file with all parameters |\n| `absspct*` | output data file with the Absorption Spectra |\n| `abslanc*` | output data file with (Lanzcos algorithm) Absorption spectra |\n| `xesspct*` | output data file with the Emission Spectra |\n| `rxsspct*` | output data file with the RIXS |\n| `photon*` | electron-photon operator |\n"
  },
  "ONETEP": {
    "codeCategory": "Atomistic code",
    "codeLabel": "ONETEP",
    "codeLabelStyle": "All in capitals",
    "codeName": "onetep",
    "codeUrl": "https://www.onetep.org/",
    "parserDirName": "dependencies/electronic/electronicparsers/onetep/",
    "parserGitUrl": "https://github.com/nomad-coe/electronic-parsers.git",
    "parserSpecific": "",
    "preamble": "",
    "status": "production",
    "tableOfFiles": ""
  },
  "ORCA": {
    "codeCategory": "Atomistic code",
    "codeLabel": "ORCA",
    "codeLabelStyle": "All in capitals",
    "codeName": "orca",
    "codeUrl": "https://www.faccts.de/orca/",
    "parserDirName": "dependencies/electronic/electronicparsers/orca/",
    "parserGitUrl": "https://github.com/nomad-coe/electronic-parsers.git",
    "parserSpecific": "",
    "preamble": "",
    "status": "production",
    "tableOfFiles": ""
  },
  "Octopus": {
    "codeCategory": "Atomistic code",
    "codeLabel": "Octopus",
    "codeLabelStyle": "Capitals: O",
    "codeName": "octopus",
    "codeUrl": "https://octopus-code.org/",
    "parserDirName": "dependencies/electronic/electronicparsers/octopus/",
    "parserGitUrl": "https://github.com/nomad-coe/electronic-parsers.git",
    "parserSpecific": "",
    "preamble": "",
    "status": "production",
    "tableOfFiles": "|Input Filename| Description|\n|--- | --- |\n|`<text_file>` | **Mainfile:** a plain text file w/arbitrary name|\n|`exec/` | Subdir for runtime information |\n|`exec/parser.log` | Input variables (user-defined & default values) |\n|`inp`| input file|\n|`parse.log`| **Warining** : probably obsolete|\n|`restart/`| Data to restart a calculation, e.g., `restart/gs/` is for ground-state|\n|`static/` | Subdir to report static part of a calculation|\n|`static/eigenvalues`| |\n|`static/info` | General info on static part|\n"
  },
  "OpenKIM": {
    "codeCategory": "Database manager",
    "codeLabel": "OpenKIM",
    "codeLabelStyle": "Capitals: O,K,I,M",
    "codeName": "openkim",
    "codeUrl": "https://openkim.org/",
    "parserDirName": "dependencies/parsers/database/databaseparsers/openkim/",
    "parserGitUrl": "https://github.com/nomad-coe/database-parsers.git",
    "parserSpecific": "",
    "preamble": "",
    "status": "production",
    "tableOfFiles": ""
  },
  "OpenMX": {
    "codeCategory": "Atomistic code",
    "codeLabel": "OpenMX",
    "codeLabelStyle": "First and last two characters in capitals",
    "codeName": "openmx",
    "codeUrl": "http://www.openmx-square.org/",
    "parserDirName": "dependencies/electronic/electronicparsers/openmx/",
    "parserGitUrl": "https://github.com/nomad-coe/electronic-parsers.git",
    "parserSpecific": "",
    "preamble": "",
    "status": "production",
    "tableOfFiles": "|Input Filename| Description|\n|--- | --- |\n|`<systemname>.out` | **Mainfile** in OpenMX specific plain-text |\n"
  },
  "Psi4": {
    "codeCategory": "Atomistic code",
    "codeLabel": "Psi4",
    "codeLabelStyle": "Capitals: P",
    "codeName": "psi4",
    "codeUrl": "https://psicode.org/",
    "parserDirName": "dependencies/electronic/electronicparsers/psi4/",
    "parserGitUrl": "https://github.com/nomad-coe/electronic-parsers.git",
    "parserSpecific": "",
    "preamble": "",
    "status": "production",
    "tableOfFiles": "|Input Filename| Description|\n|--- | --- |\n|`*.out` | **Mainfile:** a plain text file w/ **user-defined** name|\n|`*.dat` |plain text input file|\n"
  },
  "Qball": {
    "codeCategory": "Atomistic code",
    "codeLabel": "Qball",
    "codeLabelStyle": "Capitals: Q",
    "codeName": "qball",
    "codeUrl": "https://github.com/LLNL/qball",
    "parserDirName": "dependencies/electronic/electronicparsers/qball/",
    "parserGitUrl": "https://github.com/nomad-coe/electronic-parsers.git",
    "parserSpecific": "",
    "preamble": "",
    "status": "production",
    "tableOfFiles": "|Input Filename| Description|\n|--- | --- |\n|`*.out` | **Mainfile:** a plain text file w/ **user-defined** name|\n"
  },
  "Qbox": {
    "codeCategory": "Atomistic code",
    "codeLabel": "Qbox",
    "codeLabelStyle": "Capitals: Q",
    "codeName": "qbox",
    "codeUrl": "http://qboxcode.org/",
    "parserDirName": "dependencies/electronic/electronicparsers/qbox/",
    "parserGitUrl": "https://github.com/nomad-coe/electronic-parsers.git",
    "parserSpecific": "",
    "preamble": "",
    "status": "production",
    "tableOfFiles": ""
  },
  "QuantumATK": {
    "codeCategory": "Atomistic code",
    "codeLabel": "QuantumATK",
    "codeLabelStyle": "capitals: Q, A, T, K",
    "codeName": "atk",
    "codeUrl": "https://www.synopsys.com/silicon/quantumatk.html",
    "parserDirName": "dependencies/electronic/electronicparsers/atk/",
    "parserGitUrl": "https://github.com/nomad-coe/electronic-parsers.git",
    "parserSpecific": "Currently, NOMAD only supports NetCDF output of AtomistixToolKit (ATK) and not the\nHDF5 based output of QuantumATK.\n",
    "preamble": "",
    "status": "production",
    "tableOfFiles": "|Input Filename| Description|\n|--- | --- |\n|`*.nc` | The NetCDF output is used as the **mainfile** (HDF5 output is currently not yet supported) |\n|`*` | Other ATK input and output files act as auxiliary files that can be downloaded, put are not parsed |\n"
  },
  "QuantumESPRESSO": {
    "codeCategory": "Atomistic code",
    "codeLabel": "QuantumESPRESSO",
    "codeLabelStyle": "Capitals Q, E, S, P, R, E, S, S, O",
    "codeName": "quantumespresso",
    "codeUrl": "http://www.quantum-espresso.org/",
    "parserDirName": "dependencies/electronic/electronicparsers/quantum-espresso/",
    "parserGitUrl": "https://github.com/nomad-coe/electronic-parsers.git",
    "parserSpecific": "",
    "preamble": "",
    "status": "production",
    "tableOfFiles": "|Filename| Description|\n|---|---|\n|`<text_file>`|**Mainfile:** a plain text file w/arbitrary name. \\\nOne of the top lines must contain '`Program PWSCF.*starts`', \\\nwhere '`.*`' means an arbitrary number '`*`' of arbitrary \\\ncharacters '`.`'|\"\n"
  },
  "QuantumESPRESSOXSpectra": {
    "codeCategory": "Workflow manager",
    "codeLabel": "QuantumESPRESSOXSpectra",
    "codeLabelStyle": "Capitals: Q, ESPRESSO, X, S",
    "codeName": "quantumespressoxspectra",
    "codeUrl": "https://www.quantum-espresso.org/Doc/INPUT_XSpectra.txt",
    "parserDirName": "dependencies/workflow/workflowparsers/quantumespressoxspectra",
    "parserGitUrl": "https://github.com/nomad-coe/workflow-parsers.git",
    "parserSpecific": "",
    "preamble": "",
    "status": "production",
    "tableOfFiles": "| Input Filename | Description |\n| --- | --- |\n| `*.out` | **Mainfile:** text output file |\n| `*.dat` | output data file with the Absorption Spectra |\n"
  },
  "QuantumEspressPhonon": {
    "codeCategory": "Workflow manager",
    "codeLabel": "QuantumEspressPhonon",
    "codeLabelStyle": "Capitals: Q, E, P",
    "codeName": "quantumespressophonon",
    "codeUrl": "https://www.quantum-espresso.org",
    "parserDirName": "dependencies/workflow/workflowparsers/quantumespressophonon",
    "parserGitUrl": "https://github.com/nomad-coe/workflow-parsers.git",
    "parserSpecific": "",
    "preamble": "",
    "status": "production",
    "tableOfFiles": ""
  },
  "QuantumEspressoEPW": {
    "codeCategory": "Workflow manager",
    "codeLabel": "QuantumEspressoEPW",
    "codeLabelStyle": "Capitals: Q, E, E, P, W",
    "codeName": "quantumespressoepw",
    "codeUrl": "https://www.quantum-espresso.org",
    "parserDirName": "dependencies/workflow/workflowparsers/quantum_espresso_epw",
    "parserGitUrl": "https://github.com/nomad-coe/workflow-parsers.git",
    "parserSpecific": "",
    "preamble": "",
    "status": "production",
    "tableOfFiles": ""
  },
  "SIESTA": {
    "codeCategory": "Atomistic code",
    "codeLabel": "SIESTA",
    "codeLabelStyle": "All in capitals",
    "codeName": "siesta",
    "codeUrl": "https://siesta-project.org/siesta",
    "parserDirName": "dependencies/electronic/electronicparsers/siesta/",
    "parserGitUrl": "https://github.com/nomad-coe/electronic-parsers.git",
    "parserSpecific": "",
    "preamble": "",
    "status": "production",
    "tableOfFiles": ""
  },
  "TURBOMOLE": {
    "codeCategory": "Atomistic code",
    "codeLabel": "TURBOMOLE",
    "codeLabelStyle": "All in capitals",
    "codeName": "turbomole",
    "codeUrl": "https://www.turbomole.org/",
    "parserDirName": "dependencies/electronic/electronicparsers/turbomole/",
    "parserGitUrl": "https://github.com/nomad-coe/electronic-parsers.git",
    "parserSpecific": "",
    "status": "production",
    "tableOfFiles": ""
  },
  "Tinker": {
    "codeCategory": "Atomistic code",
    "codeLabel": "Tinker",
    "codeLabelStyle": "Capitals: T",
    "codeName": "tinker",
    "codeUrl": "https://dasher.wustl.edu/tinker/",
    "parserDirName": "dependencies/parsers/atomistic/atomisticparsers/tinker/",
    "parserGitUrl": "https://github.com/nomad-coe/atomistic-parsers.git",
    "parserSpecific": "",
    "preamble": "",
    "status": "production",
    "tableOfFiles": ""
  },
  "VASP": {
    "codeCategory": "Atomistic code",
    "codeLabel": "VASP",
    "codeLabelStyle": "All in capitals",
    "codeName": "vasp",
    "codeUrl": "https://www.vasp.at/",
    "parserDirName": "dependencies/electronic/electronicparsers/vasp/",
    "parserGitUrl": "https://github.com/nomad-coe/electronic-parsers.git",
    "parserSpecific": "",
    "preamble": "",
    "status": "production",
    "tableOfFiles": "|Input Filename| Description|\n|--- | --- |\n|`vasprun.xml` | **Mainfile** in plain-text (structured) XML format |\n|`OUTCAR` | plain-text (semi-structured) file, VAPS's detailed output. Read by NOMAD only as fallback to parse `outcar` data |\n"
  },
  "WIEN2k": {
    "codeCategory": "Atomistic code",
    "codeLabel": "WIEN2k",
    "codeLabelStyle": "All in capitals, except k",
    "codeName": "wien2k",
    "codeUrl": "http://www.wien2k.at/",
    "parserDirName": "dependencies/electronic/electronicparsers/wien2k/",
    "parserGitUrl": "https://github.com/nomad-coe/electronic-parsers.git",
    "parserSpecific": "",
    "status": "production",
    "tableOfFiles": ""
  },
  "Wannier90": {
    "codeCategory": "Atomistic code",
    "codeLabel": "Wannier90",
    "codeLabelStyle": "First letter in capitals, rest in lower case",
    "codeName": "wannier90",
    "codeUrl": "http://www.wannier.org/",
    "codeVersions": "3.1.0",
    "parserDirName": "dependencies/electronic/electronicparsers/wannier90/",
    "parserGitUrl": "https://github.com/nomad-coe/electronic-parsers.git",
    "parserLastUpdate": "07.10.2022",
    "parserSpecific": "",
    "preamble": "",
    "status": "production",
    "tableOfFiles": "| Input Filename | Description |\n| --- | --- |\n| `*.wout` | **Mainfile**: output text file w/ arbitrary name |\n| `*.win` | input text file |\n| `*band.dat` | band structure output file |\n| `*dos.dat` | dos output file |\n| `*hr.dat` | hopping matrices (written if write_hr *.win is true) |\n"
  },
  "YAMBO": {
    "codeCategory": "Atomistic code",
    "codeLabel": "YAMBO",
    "codeLabelStyle": "all in capitals",
    "codeName": "yambo",
    "codeUrl": "https://www.yambo-code.org/",
    "parserDirName": "dependencies/electronic/electronicparsers/yambo/",
    "parserGitUrl": "https://github.com/nomad-coe/electronic-parsers.git",
    "parserSpecific": "",
    "preamble": "",
    "status": "production",
    "tableOfFiles": "|Input Filename| Description|\n|--- | --- |\n|`r-*` | **Mainfile:** a plain text file w/ **user-defined** name|\n|`o-*` | plain text auxiliary output files w/ user-defined filenames |\n|`*.in`| plain text input file w/ **user-defined** name|\n|`n.*`| netcdf file with **user-defined** name|\n"
  },
  "exciting": {
    "codeCategory": "Atomistic code",
    "codeLabel": "exciting",
    "codeLabelStyle": "All in LOWER case",
    "codeName": "exciting",
    "codeUrl": "http://exciting-code.org/",
    "parserDirName": "dependencies/electronic/electronicparsers/exciting/",
    "parserGitUrl": "https://github.com/nomad-coe/electronic-parsers.git",
    "parserLastUpdate": "18.10.2022",
    "parserSpecific": "",
    "preamble": "",
    "status": "production",
    "tableOfFiles": "|Input Filename| Description|\n|--- | --- |\n|`INFO.OUT`| mainfile|\n|`BAND-QP.OUT`| |\n|`BANDLINES.OUT`| |\n|`DIELTENS0*.OUT`| |\n|`DIELTENS0_NOSYM*.OUT`| |\n|`EIGVAL.OUT`| |\n|`EPSILON_*FXC*_OC*.OUT `| |\n|`EPSILON_*NLF_FXC*_OC*.OUT`| |\n|`EPSILON_BSE*_SCR*_OC*.OUT`| |\n|`EVALQP.DAT or EVALQP.TXT`| |\n|`EXCITON_BSE*_SCR*_OC*.OUT`| |\n|`FERMISURF.bxsf`| |\n|`GQPOINTS*.OUT`| |\n|`GW_INFO.OUT`| |\n|`INFO_VOL       `| |\n|`LOSS_*FXC*_OC*.OUT`| |\n|`LOSS_*NLF_*FXC*_OC*.OUT`| |\n|`QPOINTS.OUT`| |\n|`SIGMA_*FXC*_OC*.OUT`| |\n|`SIGMA_*NLF_FXC*_OC*.OUT `| |\n|`SIGMA_BSE*_SCR*_OC*.OUT `| |\n|`TDOS-QP.OUT` | time dependent DOS|\n|`bandstructure-qp.dat`| |\n|`bandstructure.xml`| (vertexLabGWFile)|\n|`bandstructure.xml`| |\n|`dos.xml`| |\n|`input-gw.xml `| |\n|`input.xml`|(GSFile) |\n|`input.xml`| (XSFile)|\n|`str.out`| |\n"
  },
  "libAtoms": {
    "codeCategory": "Atomistic code",
    "codeLabel": "libAtoms",
    "codeLabelStyle": "Capitals: A",
    "codeName": "lib-atoms",
    "codeUrl": "http://libatoms.github.io/",
    "parserDirName": "dependencies/parsers/atomistic/atomisticparsers/lib-atoms/",
    "parserGitUrl": "https://github.com/nomad-coe/atomistic-parsers.git",
    "parserSpecific": "",
    "preamble": "",
    "status": "production",
    "tableOfFiles": ""
  },
  "phonopy": {
    "codeCategory": "Workflow manager",
    "codeLabel": "phonopy",
    "codeLabelStyle": "all in lower case",
    "codeName": "phonopy",
    "codeUrl": "https://phonopy.github.io/phonopy/",
    "parserDirName": "dependencies/workflow/workflowparsers/phonopy/",
    "parserGitUrl": "https://github.com/nomad-coe/workflow-parsers.git",
    "parserSpecific": "",
    "preamble": "",
    "status": "production",
    "tableOfFiles": ""
  },
  "soliddmft": {
    "codeCategory": "Atomistic code",
    "codeLabel": "soliddmft",
    "codeLabelStyle": "All in lowercase",
    "codeName": "solid_dmft",
    "codeUrl": "https://github.com/TRIQS/solid_dmft",
    "codeVersion": "",
    "parserDirName": "dependencies/parsers/electronic/electronicparsers/soliddmft/",
    "parserGitUrl": "https://github.com/nomad-coe/electronic-parsers.git",
    "parserLastUpdate": "29.12.2022",
    "parserSpecific": "",
    "preamble": "",
    "status": "production",
    "tableOfFiles": "| Input Filename | Description |\n| --- | --- |\n| `*.h5` | **Mainfile:** h5 file containing all i/o parameters w/ arbitrary name |\n"
  },
  "w2dynamics": {
    "codeCategory": "Atomistic code",
    "codeLabel": "w2dynamics",
    "codeLabelStyle": "All in lowercase",
    "codeName": "w2dynamics",
    "codeUrl": "https://github.com/w2dynamics/w2dynamics",
    "codeVersion": "",
    "parserDirName": "dependencies/parsers/electronic/electronicparsers/w2dynamics/",
    "parserGitUrl": "https://github.com/nomad-coe/electronic-parsers.git",
    "parserLastUpdate": "02.11.2022",
    "parserSpecific": "",
    "preamble": "",
    "status": "production",
    "tableOfFiles": "| Input Filename | Description |\n| --- | --- |\n| `*.hdf5` | **Mainfile:** hdf5 file containing all i/o parameters w/ arbitrary name |\n| `*.in` | input text file containing [general], [atoms], and [QMC] input parameters |\n| `epsk` | plain text, discrete bath levels |\n| `Vk` | plain text, hybridizations |\n| `w2d.log` | output log error file |\n"
  },
  "xTB": {
    "codeCategory": "Atomistic code",
    "codeLabel": "xTB",
    "codeLabelStyle": "Capitals: TB",
    "codeName": "xtb",
    "codeUrl": "https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/xtb/",
    "parserDirName": "dependencies/parsers/atomistic/atomisticparsers/gromacs//xtb/",
    "parserGitUrl": "https://github.com/nomad-coe/atomistic-parsers.git",
    "parserSpecific": "",
    "preamble": "",
    "status": "production",
    "tableOfFiles": "|Input Filename| Description|\n|--- | --- |\n|`*.out` | **Mainfile:** a plain text file w/ **user-defined** name|\n|`*.coord`|plain text; structure file|\n|`*.xyz`| plain text, structure file|\n|`*xtbopt.log`|plain text, trajectory file of geometry optimization|\n|`*xtb.trj`|plain text, trajectory of molecular dynamics|\n|`*xtbtopo.mol`|plain text, topology file|\n|`*xtbrestart`|binary file, restart file|\n|`charges` |plain text, output charges|\n"
  }
}
